tablaCocientes <- Goles/outer(FTHG,FTAG,'*')
#Ya hemos estimado las probabilidades conjuntas de que el equipo de casa anote X=x goles (x=0,1,... ,8), y el equipo visitante anote Y=y goles (y=0,1,... ,6), en un partido. Obtén una tabla de cocientes al dividir estas probabilidades conjuntas por el producto de las probabilidades marginales correspondientes.
tablaCocientes <- outer(FTHG,FTAG,'*')
tablaCocientes
Goles
#Ya hemos estimado las probabilidades conjuntas de que el equipo de casa anote X=x goles (x=0,1,... ,8), y el equipo visitante anote Y=y goles (y=0,1,... ,6), en un partido. Obtén una tabla de cocientes al dividir estas probabilidades conjuntas por el producto de las probabilidades marginales correspondientes.
tablaCocientes <- outer(FTHG,FTAG,'*')
tablaCocientes
#Ya hemos estimado las probabilidades conjuntas de que el equipo de casa anote X=x goles (x=0,1,... ,8), y el equipo visitante anote Y=y goles (y=0,1,... ,6), en un partido. Obtén una tabla de cocientes al dividir estas probabilidades conjuntas por el producto de las probabilidades marginales correspondientes.
tablaCocientes <- outer(FTAG,FTHG,'*')
tablaCocientes
Goles
#Ya hemos estimado las probabilidades conjuntas de que el equipo de casa anote X=x goles (x=0,1,... ,8), y el equipo visitante anote Y=y goles (y=0,1,... ,6), en un partido. Obtén una tabla de cocientes al dividir estas probabilidades conjuntas por el producto de las probabilidades marginales correspondientes.
tablaCocientes <- goles/outer(FTAG,FTHG,'*')
#Ya hemos estimado las probabilidades conjuntas de que el equipo de casa anote X=x goles (x=0,1,... ,8), y el equipo visitante anote Y=y goles (y=0,1,... ,6), en un partido. Obtén una tabla de cocientes al dividir estas probabilidades conjuntas por el producto de las probabilidades marginales correspondientes.
tablaCocientes <- Goles/outer(FTAG,FTHG,'*')
tablaCocientes
#Ya hemos estimado las probabilidades conjuntas de que el equipo de casa anote X=x goles (x=0,1,... ,8), y el equipo visitante anote Y=y goles (y=0,1,... ,6), en un partido. Obtén una tabla de cocientes al dividir estas probabilidades conjuntas por el producto de las probabilidades marginales correspondientes.
tablaCocientes <- (Goles/outer(FTAG,FTHG,'*')) * 100
tablaCocientes
#Ya hemos estimado las probabilidades conjuntas de que el equipo de casa anote X=x goles (x=0,1,... ,8), y el equipo visitante anote Y=y goles (y=0,1,... ,6), en un partido. Obtén una tabla de cocientes al dividir estas probabilidades conjuntas por el producto de las probabilidades marginales correspondientes.
tablaCocientes <- (Goles/outer(FTAG,FTHG,'*'))
FTHG <- (table(fthg)/dim(LaLigaFinal)[1])
FTAG <- (table(ftag)/dim(LaLigaFinal)[1])
#La probabilidad (conjunta) de que el equipo que juega en casa anote x goles y el equipo que juega como visitante anote y goles (x=0,1,2,, y=0,1,2,)
Goles <- (table(ftag, fthg)/dim(LaLigaFinal)[1])
#Ya hemos estimado las probabilidades conjuntas de que el equipo de casa anote X=x goles (x=0,1,... ,8), y el equipo visitante anote Y=y goles (y=0,1,... ,6), en un partido. Obtén una tabla de cocientes al dividir estas probabilidades conjuntas por el producto de las probabilidades marginales correspondientes.
tablaCocientes <- (Goles/outer(FTAG,FTHG,'*'))
tablaCocientes
#Importar csvs
laLiga2019 <- read.csv("~/Desktop/Data-Science-Course/Programación estadística con R/Manipulación de datos en R/Data/LaLiga/LaLiga2019-2020.csv")
laLiga2018 <- read.csv("~/Desktop/Data-Science-Course/Programación estadística con R/Manipulación de datos en R/Data/LaLiga/LaLiga2018-2019.csv")
laLiga2017 <- read.csv("~/Desktop/Data-Science-Course/Programación estadística con R/Manipulación de datos en R/Data/LaLiga/LaLiga2017-2018.csv")
#Cargar la libreria
library(dplyr)
View(laLiga2017)
#Nombre del dataframe va primero.
LaLiga2019 <-select(laLiga2019, Date, HomeTeam, FTHG, AwayTeam, FTAG) # Date, HomeTeam, AwayTeam, FTHG, FTAG
LaLiga2018 <-select(laLiga2018, Date, HomeTeam, FTHG, AwayTeam, FTAG)
LaLiga2017 <-select(laLiga2017, Date, HomeTeam, FTHG, AwayTeam, FTAG)
#Arreglamos la fecha
LaLiga2019Date <- mutate(LaLiga2019, Date = as.Date(Date, "%d/%m/%Y"))
LaLiga2018Date <- mutate(LaLiga2018, Date = as.Date(Date, "%d/%m/%Y"))
LaLiga2017Date <- mutate(LaLiga2017, Date = as.Date(Date, "%d/%m/%y"))
#Ponemos todos los data frames en una lista
LaLiga <- list(LaLiga2019Date, LaLiga2018Date, LaLiga2017Date)
#Combinar los dataframes en uno solo
SmallData <- do.call(rbind, LaLiga)
SmallData
#Guardar csv
write.csv(x = SmallData, file = "soccer.csv", row.names = FALSE)
#Con la función create.fbRanks.dataframes del paquete fbRanks importe el archivo soccer.csv a R y al mismo tiempo asignelo a una variable llamada listasoccer. Se creará una lista con los elementos scores y teams que son data frames listos para la función rank.teams. Asigna estos data frames a variables llamadas anotaciones y equipos.
install.packages("fbRanks")
library(fbRanks)
listasoccer <- create.fbRanks.dataframes(scores.file = "~/Desktop/Data-Science-Course/Programación estadística con R/Regresión lineal y clasificación/Data/soccer.csv")
library(fbRanks)
listasoccer <- create.fbRanks.dataframes(scores.file = "~/Desktop/Data-Science-Course/Programación estadística con R/Regresión lineal y clasificación/Data/soccer.csv")
anotaciones <- listasoccer$scores
equipos <- listasoccer$teams
#Con ayuda de la función unique crea un vector de fechas (fecha) que no se repitan y que correspondan a las fechas en las que se jugaron partidos. Crea una variable llamada n que contenga el número de fechas diferentes. Posteriormente, con la función rank.teams y usando como argumentos los data frames anotaciones y equipos, crea un ranking de equipos usando unicamente datos desde la fecha inicial y hasta la penúltima fecha en la que se jugaron partidos, estas fechas las deberá especificar en max.date y min.date. Guarda los resultados con el nombre ranking.
fecha <- unique(anotaciones$date)
n <- length(fecha)
ranking <- rank.teams(scores = anotaciones, teams = equipos,
max.date = fecha[n-1],
min.date = fecha[1])
#Finalmente estima las probabilidades de los eventos, el equipo de casa gana, el equipo visitante gana o el resultado es un empate para los partidos que se jugaron en la última fecha del vector de fechas fecha. Esto lo puedes hacer con ayuda de la función predict y usando como argumentos ranking y fecha[n] que deberá especificar en date.
predict(ranking, date = fecha[n])
#Finalmente estima las probabilidades de los eventos, el equipo de casa gana, el equipo visitante gana o el resultado es un empate para los partidos que se jugaron en la última fecha del vector de fechas fecha. Esto lo puedes hacer con ayuda de la función predict y usando como argumentos ranking y fecha[n] que deberá especificar en date.
predicciones <- predict(ranking, date = fecha[n])
View(predicciones)
View(predicciones)
predicciones$scores
prediccionesGoles <- predicciones$scores
View(prediccionesGoles)
View(prediccionesGoles)
prediccionesFinal <- predicciones$scores
final <-select(prediccionesFinal, home.team, away.team, home.win, away.win, tie) # Date, HomeTeam, AwayTeam, FTHG, FTAG
#Cargar la libreria
library(dplyr)
prediccionesFinal
final
final <-select(prediccionesFinal, home.team, away.team, home.win, away.win, tie) # Date, HomeTeam, AwayTeam, FTHG, FTAG
View(final)
View(final)
#Importar el csv
data <- read.csv("~/Desktop/Data-Science-Course/Programación estadística con R/Series de tiempo/Data/match.csv")
View(data)
View(data)
#Importar el csv
matches <- read.csv("~/Desktop/Data-Science-Course/Programación estadística con R/Series de tiempo/Data/match.csv")
View(matches)
View(matches)
#Agrega una nueva columna sumagoles que contenga la suma de goles por partido.
matches <- mutate(sumagoles = home.score + away.score)
#Agrega una nueva columna sumagoles que contenga la suma de goles por partido.
library(dplyr)
matches <- mutate(sumagoles = home.score + away.score)
matches <- mutate(matches, sumagoles = home.score + away.score)
View(matches)
View(matches)
install.packages("tidyverse")
library(ggplot2)
library(data.table)
install("data.table")
install.packages("data.table")
library(data.table)
#Poner ruta propia
covid <- read.csv("~/Desktop/Santander-DataScience/Data/Covid.csv")
View(covid)
View(covid)
libertad <- readr::read_csv("https://raw.githubusercontent.com/cienciadedatos/datos-de-miercoles/master/datos/2019/2019-08-14/libertad.csv")
View(libertad)
View(libertad)
libertad <- readr::read_csv("https://raw.githubusercontent.com/cienciadedatos/datos-de-miercoles/master/datos/2019/2019-08-14/libertad.csv")
#Poner ruta propia
covid <- read.csv("~/Desktop/Santander-DataScience/Data/Covid.csv")
View(covid)
View(covid)
View(libertad)
View(libertad)
COVID <-select(covid, country = country.region, casos = total) # Date, HomeTeam, AwayTeam, FTHG, FTAG
#Cargar las librerias
library(dplyr)
COVID <-select(covid, country = country.region, casos = total) # Date, HomeTeam, AwayTeam, FTHG, FTAG
COVID <-select(covid, pais = Country.Region, casos = total) # Date, HomeTeam, AwayTeam, FTHG, FTAG
COVID <-select(covid, pais = Country.Region, casos = suma) # Date, HomeTeam, AwayTeam, FTHG, FTAG
View(COVID)
View(COVID)
##Agrupamos por pais
COVID %>%
group_by(pais) %>%                  # pais
summarise(totales = sum(casos)       # Sumamos los casos totales
)
View(COVID)
View(COVID)
#Limpiamos el dataset
COVID <-select(covid, pais = Country.Region, casos = 1/17/21)
#Poner ruta propia
covid <- read.csv("~/Desktop/Santander-DataScience/Data/Covid.csv")
#Limpiamos el dataset
COVID <-select(covid, pais = Country.Region, casos = 1/17/21)
#Poner ruta propia
covid <- read.csv("~/Desktop/Santander-DataScience/Data/Covid.csv")
#Cargar las librerias
library(dplyr)
#Limpiamos el dataset
COVID <-select(covid, pais = Country.Region, casos = totales)
##Agrupamos por pais
COVID %>%
group_by(pais) %>%                  # pais
summarise(totales = sum(casos)       # Sumamos los casos totales
)
View(COVID)
View(COVID)
##Agrupamos por pais
Coronaviros <- COVID %>%
group_by(pais) %>%                  # pais
summarise(totales = sum(casos)       # Sumamos los casos totales
)
View(Coronaviros)
View(Coronaviros)
##Agrupamos por pais
Coronavirus <- COVID %>%
group_by(pais) %>%                  # pais
summarise(totales = sum(casos)       # Sumamos los casos totales
)
View(Coronavirus)
View(Coronavirus)
library(rgdal)
library(leaflet)
install.packages("rgdal")
install.packages("leaflet")
library(rgdal)
library(leaflet)
install.packages("rgdal")
df_mapa<- readOGR("~/Desktop/Santander-DataScience/shp_mapa_paises_mundo_2014/Mapa_paises_mundo.shp")
install.packages("rgdal")
library(rgdal)
install.packages("rgdal")
library(rgdal)
df_mapa<- readOGR("~/Desktop/Santander-DataScience/shp_mapa_paises_mundo_2014/Mapa_paises_mundo.shp")
install.packages("rgdal")
install.packages("rgdal")
library(rgdal)
library(leaflet)
#Limpiamos el dataset
COVID <-select(covid, pais = Country.Region, casos = totales)
df_mapa<- readOGR("~/Desktop/Santander-DataScience/shp_mapa_paises_mundo_2014/Mapa_paises_mundo.shp")
#Importar csvs
laLiga2019 <- read.csv("~/Desktop/Data-Science-Course/Programación estadística con R/Manipulación de datos en R/Data/LaLiga/LaLiga2019-2020.csv")
laLiga2018 <- read.csv("~/Desktop/Data-Science-Course/Programación estadística con R/Manipulación de datos en R/Data/LaLiga/LaLiga2018-2019.csv")
laLiga2017 <- read.csv("~/Desktop/Data-Science-Course/Programación estadística con R/Manipulación de datos en R/Data/LaLiga/LaLiga2017-2018.csv")
#Cargar la libreria
library(dplyr)
#Nombre del dataframe va primero.
LaLiga2019 <-select(laLiga2019, date = Date, home.team = HomeTeam, home.score = FTHG, away.team = AwayTeam, away.score = FTAG) # Date, HomeTeam, AwayTeam, FTHG, FTAG
LaLiga2018 <-select(laLiga2018, date = Date, home.team = HomeTeam, home.score = FTHG, away.team = AwayTeam, away.score = FTAG)
LaLiga2017 <-select(laLiga2017, date = Date, home.team = HomeTeam, home.score = FTHG, away.team = AwayTeam, away.score = FTAG)
#Arreglamos la fecha
LaLiga2019Date <- mutate(LaLiga2019, date = as.Date(date, "%d/%m/%Y"))
LaLiga2018Date <- mutate(LaLiga2018, date = as.Date(date, "%d/%m/%Y"))
LaLiga2017Date <- mutate(LaLiga2017, date = as.Date(date, "%d/%m/%y"))
#Ponemos todos los data frames en una lista
LaLiga <- list(LaLiga2019Date, LaLiga2018Date, LaLiga2017Date)
#Combinar los dataframes en uno solo
SmallData <- do.call(rbind, LaLiga)
#Con la función create.fbRanks.dataframes del paquete fbRanks importe el archivo soccer.csv a R y al mismo tiempo asignelo a una variable llamada listasoccer. Se creará una lista con los elementos scores y teams que son data frames listos para la función rank.teams. Asigna estos data frames a variables llamadas anotaciones y equipos.
install.packages("fbRanks")
library(fbRanks)
#Importar el csv
matches <- read.csv("~/Desktop/Data-Science-Course/Programación estadística con R/Series de tiempo/Data/match.csv")
#Agrega una nueva columna sumagoles que contenga la suma de goles por partido.
library(dplyr)
matches <- mutate(matches, sumagoles = home.score + away.score)
#Obtén el promedio por mes de la suma de goles.
promedio <- mean(matches$sumagoles)
promedio
View(matches)
View(matches)
#Obtén el promedio por mes de la suma de goles.
mutate(date = as.Date(date, "%Y-%m-%d")
#Obtén el promedio por mes de la suma de goles.
mutate(date = as.Date(date, "%Y-%m-%d"))
#Obtén el promedio por mes de la suma de goles.
mutate(date = as.Date(date, "%Y-%m-%d"))
Matches <- matches %>%
mutate(date = as.Date(date, "%Y-%m-%d"))
View(Matches)
View(Matches)
Matches <- matches %>%
mutate(date = as.Date(date, "%Y-%m"))
View(Matches)
View(Matches)
Matches <- matches %>%
mutate(date = as.Date(date, "%Y-%m-%d"))
View(Matches)
View(Matches)
Matches <- matches %>%
mutate(date = as.Date(date, "%Y-%m"))
View(Matches)
View(Matches)
Matches <- matches %>%
mutate(date = format(date, "%Y-%m"))
Matches <- matches %>%
mutate(Mes = format(date, "%Y-%m"))
Matches <- matches %>%
mutate(Mes = format(date, "%Y-%m"))
Matches <- matches %>%
mutate(date = as.Date(date, "%Y-%m-%d"))
Matches <- matches %>%
mutate(date = format(date, "%Y-%m"))
Mes
Matches <- matches %>%
mutate(date = as.Date(date, "%Y-%m-%d")) %>%
mutate(Mes = format(date, "%Y-%m"))
View(Matches)
View(Matches)
golesMes <- Matches %>%
group_by(date) %>%                  # date
summarise(totales = mean(matches$sumagoles)       # promediamos los goles totales
)
View(golesMes)
View(golesMes)
golesMes <- Matches %>%
group_by(Mes) %>%                  # date
summarise(totales = mean(matches$sumagoles)       # promediamos los goles totales
)
View(golesMes)
View(golesMes)
golesMes <- Matches %>%
group_by(Mes) %>%                  # date
summarise(totales = mean(Matches$sumagoles)       # promediamos los goles totales
)
View(golesMes)
View(golesMes)
golesMes <- Matches %>%
group_by(Mes) %>%                  # date
summarise(totales = mean(sumagoles)       # promediamos los goles totales
)
View(golesMes)
View(golesMes)
#Importar el csv
matches <- read.csv("~/Desktop/Data-Science-Course/Programación estadística con R/Series de tiempo/Data/match.csv")
#Agrega una nueva columna sumagoles que contenga la suma de goles por partido.
library(dplyr)
matches <- mutate(matches, sumagoles = home.score + away.score)
Matches <- matches %>%
mutate(date = as.Date(date, "%Y-%m-%d")) %>%
mutate(Mes = format(date, "%Y-%m"))
golesMes <- Matches %>%
group_by(Mes) %>%                  # date
summarise(totales = mean(sumagoles)       # promediamos los goles totales
)
View(golesMes)
View(golesMes)
#Crea la serie de tiempo del promedio por mes de la suma de goles hasta diciembre de 2019.
serie <- ts(golesMes$totales, start = 1, frequency = 10)
serie
serie.plot(totales)
serie.plot(totales)
#Crea la serie de tiempo del promedio por mes de la suma de goles hasta diciembre de 2019.
serie <- ts(golesMes$totales, start = 1, frequency = 10)
serie.plot(totales)
serie.plot(totales)
#Crea la serie de tiempo del promedio por mes de la suma de goles hasta diciembre de 2019.
(golesMes <- as.data.frame(golesMes))
serie <- ts(golesMes$totales, start = 1, frequency = 10)
serie.plot(totales)
#Crea la serie de tiempo del promedio por mes de la suma de goles hasta diciembre de 2019.
serie <- ts(golesMes$totales, start = 1, frequency = 10)
serie
#Crea la serie de tiempo del promedio por mes de la suma de goles hasta diciembre de 2019.
serie <- ts(golesMes, start = 1, frequency = 10)
serie
#Crea la serie de tiempo del promedio por mes de la suma de goles hasta diciembre de 2019.
serie <- ts(golesMes$totales, start = 1, frequency = 10)
serie
#Importar el csv
matches <- read.csv("~/Desktop/Data-Science-Course/Programación estadística con R/Series de tiempo/Data/match.csv")
matches <- mutate(matches, sumagoles = home.score + away.score)
#Agrega una nueva columna sumagoles que contenga la suma de goles por partido.
library(dplyr)
matches <- mutate(matches, sumagoles = home.score + away.score)
Matches <- matches %>%
mutate(date = as.Date(date, "%Y-%m-%d")) %>%
mutate(Mes = format(date, "%Y-%m"))
golesMes <- Matches %>%
group_by(Mes) %>%                  # date
summarise(totales = mean(sumagoles)       # promediamos los goles totales
)
#Crea la serie de tiempo del promedio por mes de la suma de goles hasta diciembre de 2019.
serie <- ts(golesMes$totales, start = 1, frequency = 10)
serie
ts.plot(serie)
library(mongolite)
install.packages("mongolite")
library(mongolite)
install.packages("mongolite")
install.packages("mongolite")
install.packages("mongolite")
library(fbRanks)
library(dplyr)
library(ggplot2)
setwd("~/Desktop/Data-Science-Course/Programación estadística con R/Dashboards con Shiny - Entorno GUI")
u1011 <- "https://www.football-data.co.uk/mmz4281/1011/SP1.csv"
u1112 <- "https://www.football-data.co.uk/mmz4281/1112/SP1.csv"
u1213 <- "https://www.football-data.co.uk/mmz4281/1213/SP1.csv"
u1314 <- "https://www.football-data.co.uk/mmz4281/1314/SP1.csv"
u1415 <- "https://www.football-data.co.uk/mmz4281/1415/SP1.csv"
u1516 <- "https://www.football-data.co.uk/mmz4281/1516/SP1.csv"
u1617 <- "https://www.football-data.co.uk/mmz4281/1617/SP1.csv"
u1718 <- "https://www.football-data.co.uk/mmz4281/1718/SP1.csv"
u1819 <- "https://www.football-data.co.uk/mmz4281/1819/SP1.csv"
u1920 <- "https://www.football-data.co.uk/mmz4281/1920/SP1.csv"
#RawData <- "C:\\\"
download.file(url = u1011, destfile ="SP1-1011.csv", mode = "wb")
download.file(url = u1112, destfile ="SP1-1112.csv", mode = "wb")
download.file(url = u1213, destfile ="SP1-1213.csv", mode = "wb")
download.file(url = u1314, destfile ="SP1-1314.csv", mode = "wb")
download.file(url = u1415, destfile ="SP1-1415.csv", mode = "wb")
download.file(url = u1516, destfile ="SP1-1516.csv", mode = "wb")
download.file(url = u1617, destfile ="SP1-1617.csv", mode = "wb")
download.file(url = u1718, destfile ="SP1-1718.csv", mode = "wb")
download.file(url = u1819, destfile ="SP1-1819.csv", mode = "wb")
download.file(url = u1920, destfile ="SP1-1920.csv", mode = "wb")
d1011 <- read.csv("SP1-1011.csv")
d1112 <- read.csv("SP1-1112.csv")
d1213 <- read.csv("SP1-1213.csv")
d1314 <- read.csv("SP1-1314.csv")
d1415 <- read.csv("SP1-1415.csv")
d1516 <- read.csv("SP1-1516.csv")
d1617 <- read.csv("SP1-1617.csv")
d1718 <- read.csv("SP1-1718.csv")
d1819 <- read.csv("SP1-1819.csv")
d1920 <- read.csv("SP1-1920.csv")
d1011S <- select(d1011, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1112S <- select(d1112, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1213S <- select(d1213, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1314S <- select(d1314, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1415S <- select(d1415, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1516S <- select(d1516, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1617S <- select(d1617, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1718S <- select(d1718, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1819S <- select(d1819, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1920S <- select(d1920, Date:FTAG, Max.2.5:Avg.2.5.1)
d1920S <- select(d1920S, -Time)
# Arreglamos las fechas
d1011S <- mutate(d1011S, Date = as.Date(Date, format = "%d/%m/%y"))
d1112S <- mutate(d1112S, Date = as.Date(Date, format = "%d/%m/%y"))
d1213S <- mutate(d1213S, Date = as.Date(Date, format = "%d/%m/%y"))
d1314S <- mutate(d1314S, Date = as.Date(Date, format = "%d/%m/%y"))
d1415S <- mutate(d1415S, Date = as.Date(Date, format = "%d/%m/%y"))
d1516S <- mutate(d1516S, Date = as.Date(Date, format = "%d/%m/%y"))
d1617S <- mutate(d1617S, Date = as.Date(Date, format = "%d/%m/%y"))
d1718S <- mutate(d1718S, Date = as.Date(Date, format = "%d/%m/%y"))
d1819S <- mutate(d1819S, Date = as.Date(Date, format = "%d/%m/%Y"))
d1920S <- mutate(d1920S, Date = as.Date(Date, format = "%d/%m/%Y"))
d1019S <- rbind(d1011S, d1112S, d1213S, d1314S, d1415S, d1516S, d1617S, d1718S, d1819S)
d1019S <- rename(d1019S,  Max.2.5.O = BbMx.2.5,
Avg.2.5.O = BbAv.2.5,
Max.2.5.U = BbMx.2.5.1,
Avg.2.5.U = BbAv.2.5.1)
d1920S <- rename(d1920S,  Max.2.5.O = Max.2.5,
Avg.2.5.O = Avg.2.5,
Max.2.5.U = Max.2.5.1,
Avg.2.5.U = Avg.2.5.1)
d1019S <- select(d1019S, colnames(d1920S))
d1020S <- rbind(d1019S, d1920S)
d1020S <- rename(d1020S, date = Date, home.team = HomeTeam, home.score = FTHG, away.team = AwayTeam, away.score = FTAG)
data <- select(d1020S, date, home.team, home.score, away.team, away.score:Avg.2.5.U) # Este data frame contiene todos los datos necesarios
head(data, n = 2L); tail(data, n = 2L)
md <- data %>% select(date:away.score)
write.csv(md, "match.data.csv", row.names = FALSE)
df <- create.fbRanks.dataframes(scores.file = "match.data.csv")
teams <- df$teams; scores <- df$scores
head(teams, n = 2L); dim(teams); head(scores, n = 2L); dim(scores)
f <- scores$date # Fechas de partidos
fu <- unique(f) # Fechas sin repetición
Ym <- format(fu, "%Y-%m") # Meses y años
Ym <- unique(Ym) # Meses y años sin repetir
places <- which(Ym[15]==format(scores$date, "%Y-%m")) # Consideramos partidos de 15 meses para comenzar a ajustar el modelo
ffe <- scores$date[max(places)] # Fecha final conjunto de entrenamiento
train <- scores %>% filter(date <= ffe)
test <- scores %>% filter(date > ffe)
head(train, n = 1); tail(train, n = 1)
head(test, n = 1); tail(test, n = 1)
traindate <- unique(train$date)
testdate <- unique(test$date)
ranks <- rank.teams(scores = scores, teams = teams,
min.date = traindate[1],
max.date = traindate[length(traindate)])
pred <- predict(ranks, date = testdate[1])
phs <- pred$scores$pred.home.score # predicted home score
pas <- pred$scores$pred.away.score # predicted away score
pht <- pred$scores$home.team # home team in predictions
pat <- pred$scores$away.team # away team in predictions
phs <- NULL; pas <- NULL; pht <- NULL; pat <- NULL
for(i in 1:(length(unique(scores$date))-170)){
ranks <- rank.teams(scores = scores, teams = teams,
min.date = unique(scores$date)[i],
max.date = unique(scores$date)[i+170-1],
silent = TRUE,
time.weight.eta = 0.0005)
pred <- predict(ranks, date = unique(scores$date)[i+170],
silent = TRUE)
phs <- c(phs, pred$scores$pred.home.score) # predicted home score
pas <- c(pas, pred$scores$pred.away.score) # predicted away score
pht <- c(pht, pred$scores$home.team) # home team in predictions
pat <- c(pat, pred$scores$away.team) # away team in predictions
}
buenos <- !(is.na(phs) | is.na(pas)) #
phs <- phs[buenos] # predicted home score
pas <- pas[buenos] # predicted away score
pht <- pht[buenos] # home team in predictions
pat <- pat[buenos] # away team in predictions
momio <- data %>% filter(date >= unique(scores$date)[171]) # momios conjunto de prueba
momio <- momio[buenos,]
mean(pht == momio$home.team); mean(pat == momio$away.team)
mean(phs + pas > 2.5 & momio$home.score + momio$away.score > 2.5)
mean(phs + pas < 2.5 & momio$home.score + momio$away.score < 2.5)
hs <- momio$home.score
as <- momio$away.score
mean(phs + pas > 3) # proporción de partidos con más de tres goles según el modelo
mean(phs + pas > 3 & hs + as > 2.5)/mean(phs + pas > 3)
# probabilidad condicional estimada de ganar en over 2.5
mean(phs + pas < 2.1) # proporción de partidos con menos de 2.1 goles según el modelo
mean(phs + pas < 2.1 & hs + as < 2.5)/mean(phs + pas < 2.1)
cap <- 50000; g <- NULL
for(j in 1:l}ength(phs)){
for(j in 1:length(phs)){
if(((phs[j] + pas[j]) > 3) & (0.64/(momio$Max.2.5.O[j]^-1) > 1)){
if((hs[j] + as[j]) > 2.5) cap <- cap + 1000*(momio$Max.2.5.O[j]-1)
else cap <- cap - 1000
g <- c(g, cap)
}
if(((phs[j] + pas[j]) < 2.1) & (0.58/(momio$Max.2.5.U[j]^-1) > 1)){
if((hs[j] + as[j]) < 2.5) cap <- cap + 1000*(momio$Max.2.5.U[j]-1)
else cap <- cap - 1000
g <- c(g, cap)
}
}
g <- data.frame(Num_Ap = 1:length(g), Capital = g)
p <- ggplot(g, aes(x=Num_Ap, y=Capital)) + geom_line( color="purple") + geom_point() +
labs(x = "Número de Apuesta",
y = "Capital",
title = "Realizando una secuencia de apuestas") +
theme(plot.title = element_text(size=12))  +
theme(axis.text.x = element_text(face = "bold", color="blue" , size = 10, angle = 25, hjust = 1),
axis.text.y = element_text(face = "bold", color="blue" , size = 10, angle = 25, hjust = 1))  # color, ángulo y estilo de las abcisas y ordenadas
p
cap <- 50000; g <- NULL
for(j in 1:length(phs)){
if(((phs[j] + pas[j]) > 3) & (0.64/(momio$Avg.2.5.O[j]^-1) > 1)){
if((hs[j] + as[j]) > 2.5) cap <- cap + 1000*(momio$Avg.2.5.O[j]-1)
else cap <- cap - 1000
g <- c(g, cap)
}
if(((phs[j] + pas[j]) < 2.1) & (0.58/(momio$Avg.2.5.U[j]^-1) > 1)){
if((hs[j] + as[j]) < 2.5) cap <- cap + 1000*(momio$Avg.2.5.U[j]-1)
else cap <- cap - 1000
g <- c(g, cap)
}
}
g <- data.frame(Num_Ap = 1:length(g), Capital = g)
p <- ggplot(g, aes(x=Num_Ap, y=Capital)) + geom_line( color="purple") + geom_point() +
labs(x = "Número de Apuesta",
y = "Capital",
title = "Realizando una secuencia de apuestas") +
theme(plot.title = element_text(size=12))  +
theme(axis.text.x = element_text(face = "bold", color="blue" , size = 10, angle = 25, hjust = 1),
axis.text.y = element_text(face = "bold", color="blue" , size = 10, angle = 25, hjust = 1))  # color, ángulo y estilo de las abcisas y ordenadas
p
